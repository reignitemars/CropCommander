@page "/"
@using CropCommander.Common.Queries.Field
@using CropCommander.Website.Components.Field
@using Field = CropCommander.Common.Models.Field
@inject  MediatR.IMediator Mediator;
@inject IDialogService DialogService

<PageTitle>Home</PageTitle>

<MudContainer Style="padding: 1rem; margin: 1rem auto; background-color: #f9f9f9; border-radius: 8px; min-width: 100%; min-height: 100%">
    <MudDataGrid T="Field" Items="_filteredFields" Dense="true" Style="flex-grow: 1; min-height: 100%">
        <ToolBarContent>
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                <MudText Typo="Typo.h6" Class="">Fields</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_filterText" Text="@_filterText" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" TextChanged="@OnTextChange"/>
                <MudButton Variant="Variant.Filled" OnClick="OpenAddFieldDialog">Add Field</MudButton>
            </MudStack>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.FieldName" Title="Field Name"/>
            <PropertyColumn Property="x => x.CropName" Title="Crop Name"/>
            <PropertyColumn Property="x => x.FieldArea" Title="Field Area (ha)"/>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Field" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>


@code {
    private string _filterText = string.Empty;
    private List<Field>? _filteredFields = [];
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await Refresh();
    }

    private async Task Refresh()
    {
        _filteredFields = await Mediator.Send(new GetFieldListQuery(_filterText));

        StateHasChanged();
    }

    // private async Task OpenAddFieldDialog() => await _addFieldDialog.OpenAsync();

    private async Task ReloadFields() => await Refresh();

    private async Task OnTextChange(string arg) => await Refresh();
    
    private async Task OpenAddFieldDialog()
    {
        var dialog = await DialogService.ShowAsync<Create>();
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await Refresh();
        }
    }

}
