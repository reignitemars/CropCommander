@using CropCommander.Common.Commands
@using CropCommander.Website.Services
@using CropCommander.Common.Models
@inject MediatR.IMediator Mediator

<MudDialog @ref="_dialog">
    <DialogContent>
        <MudTextField @bind-Value="_field.FieldName" Label="Field Name" Required="true" />
        <MudNumericField @bind-Value="_field.FieldArea" Label="Field Area (ha)" Min="0" Required="true" />
        <MudTextField @bind-Value="_field.CropName" Label="Crop Name" Required="true" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="SaveField">Save</MudButton>
        <MudButton Variant="Variant.Text" OnClick="CloseDialog">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private MudDialog _dialog = null!;
    private Field _field = new();

    [Parameter] 
    public EventCallback OnFieldAdded { get; set; }

    public async Task OpenAsync()
    {
        _field = new Field();
        await _dialog.ShowAsync();
    }

    private async Task SaveField()
    {
        try
        {
            await Mediator.Send(new AddFieldCommand(_field.FieldName, _field.FieldArea, _field.CropName));

            await CloseDialog();
            await OnFieldAdded.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private Task CloseDialog() => _dialog.CloseAsync();
}