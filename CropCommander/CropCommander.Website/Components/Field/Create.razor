@using CropCommander.Common.Commands
@inject MediatR.IMediator Mediator

<MudDialog Class="dialog-styled" Style="min-width: 30%; min-height: 20%">
    <TitleContent>
        <MudText Typo="Typo.h6" Align="Align.Center" Inline="true">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3"/>
            Add New Field
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudStack Spacing="3" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Stretch">
            <MudTextField @bind-Value="_field.FieldName" Label="Field Name" Required="true"/>
            <MudNumericField @bind-Value="_field.FieldArea" Label="Field Area (ha)" Min="0" Required="true"/>
            <MudTextField @bind-Value="_field.CropName" Label="Crop Name" Required="true"/>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveField" Style="min-width: 120px;">Save</MudButton>
        <MudButton Variant="Variant.Text" OnClick="CloseDialog" Style="min-width: 120px;">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance CreateDialogInstance { get; set; }
    
    private Field _field = new();

    [Parameter] 
    public EventCallback OnFieldAdded { get; set; }

    private async Task SaveField()
    {
        try
        {
            await Mediator.Send(new AddFieldCommand(_field.FieldName, _field.FieldArea, _field.CropName));

            CreateDialogInstance.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void CloseDialog() => CreateDialogInstance.Close(DialogResult.Cancel());
}